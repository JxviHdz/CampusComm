function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback, useEffect, useImperativeHandle } from "react";
import usePreviewsLoader from "./usePreviewsLoader";
import { getFallbackUrlData } from "./utils";
import { PREVIEW_TYPES } from "./consts";

var showBasicPreview = function (type, url, previewProps, onImgError) {
  return type === PREVIEW_TYPES.VIDEO ? /*#__PURE__*/React.createElement("video", _extends({
    key: url,
    src: url,
    controls: true
  }, previewProps)) : /*#__PURE__*/React.createElement("img", _extends({
    key: url,
    onError: onImgError,
    src: url
  }, previewProps));
};

var usePreviewMethods = function (previews, clearPreviews, previewMethodsRef, onPreviewsChanged) {
  useImperativeHandle(previewMethodsRef, function () {
    return {
      clear: clearPreviews
    };
  }, [clearPreviews]);
  useEffect(function () {
    if (onPreviewsChanged) {
      onPreviewsChanged(previews);
    }
  }, [previews, onPreviewsChanged]);
};

var UploadPreview = function (props) {
  var PreviewComponent = props.PreviewComponent,
      previewMethodsRef = props.previewMethodsRef,
      onPreviewsChanged = props.onPreviewsChanged,
      previewOptions = _objectWithoutProperties(props, ["PreviewComponent", "previewMethodsRef", "onPreviewsChanged"]);

  var _usePreviewsLoader = usePreviewsLoader(previewOptions),
      previews = _usePreviewsLoader.previews,
      clearPreviews = _usePreviewsLoader.clearPreviews;

  var onImagePreviewLoadError = useCallback(function (e) {
    var img = e.target;
    var fallback = getFallbackUrlData(props.fallbackUrl, img.src);

    if (fallback) {
      img.src = fallback.url;
    }
  }, [props.fallbackUrl]);
  usePreviewMethods(previews, clearPreviews, previewMethodsRef, onPreviewsChanged);
  return previews.map(function (data) {
    var id = data.id,
        url = data.url,
        type = data.type,
        name = data.name,
        isFallback = data.isFallback,
        previewProps = data.props;
    return PreviewComponent ? /*#__PURE__*/React.createElement(PreviewComponent, _extends({
      key: id + url,
      id: id,
      url: url,
      type: type,
      name: name,
      isFallback: isFallback
    }, previewProps)) : showBasicPreview(type, url, previewProps, onImagePreviewLoadError);
  });
};

export default UploadPreview;