function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useState, useCallback } from "react";
import { isFunction } from "@rpldy/shared";
import { useBatchStartListener } from "@rpldy/shared-ui";
import { PREVIEW_TYPES } from "./consts";
import { getWithMandatoryOptions, getFallbackUrlData, getFileObjectUrlByType } from "./utils";

var getFilePreviewUrl = function (file, options) {
  var data = getFileObjectUrlByType(PREVIEW_TYPES.IMAGE, options.imageMimeTypes, options.maxPreviewImageSize || 0, file);

  if (!data) {
    data = getFileObjectUrlByType(PREVIEW_TYPES.VIDEO, options.videoMimeTypes, options.maxPreviewVideoSize || 0, file);
  }

  return data;
};

var loadPreviewData = function (item, options, previewComponentProps) {
  var data,
      props,
      isFallback = false;

  if (item.file) {
    var file = item.file;
    data = getFilePreviewUrl(item.file, options);

    if (!data) {
      data = getFallbackUrlData(options.fallbackUrl, file);
      isFallback = true;
    }
  } else {
    data = {
      url: item.url,
      name: item.url,
      type: PREVIEW_TYPES.IMAGE
    };
  }

  if (data) {
    props = isFunction(previewComponentProps) ? previewComponentProps(item, data.url, data.type) : previewComponentProps;
  }

  return data && _objectSpread(_objectSpread({}, data), {}, {
    id: item.id,
    isFallback: isFallback,
    props: props
  });
};

var mergePreviewData = function (prev, next) {
  var newItems = []; //dedupe and merge new with existing

  next.forEach(function (n) {
    var existingIndex = prev.findIndex(function (p) {
      return p.id === n.id;
    });

    if (~existingIndex) {
      prev.splice(existingIndex, 1, n);
    } else {
      newItems.push(n);
    }
  });
  return prev.concat(newItems);
};

export default (function (props) {
  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      previews = _useState2[0],
      setPreviews = _useState2[1];

  var previewOptions = getWithMandatoryOptions(props);
  var clearPreviews = useCallback(function () {
    setPreviews([]);
  }, []);
  useBatchStartListener(function (batch) {
    var items = previewOptions.loadFirstOnly ? batch.items.slice(0, 1) : batch.items;
    var previewsData = items.map(function (item) {
      return loadPreviewData(item, previewOptions, props.previewComponentProps);
    }).filter(Boolean);
    setPreviews(props.rememberPreviousBatches ? mergePreviewData(previews, previewsData) : previewsData);
  });
  return {
    previews: previews,
    clearPreviews: clearPreviews
  };
});