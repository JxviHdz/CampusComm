function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { isFunction } from "@rpldy/shared";
import { PREVIEW_TYPES } from "./consts";
import { PREVIEW_DEFAULTS } from "./defaults";

var getWithMandatoryOptions = function (options) {
  return _objectSpread(_objectSpread({}, PREVIEW_DEFAULTS), options);
};

var getFallbackUrlData = function (fallbackProp, file) {
  var data = isFunction(fallbackProp) ? fallbackProp(file) : fallbackProp;

  if (typeof data === "string") {
    data = {
      id: "",
      url: data,
      name: file.name,
      type: PREVIEW_TYPES.IMAGE
    };
  }

  return data;
};

var getFileObjectUrlByType = function (type, mimeTypes, max, file) {
  var data;

  if (mimeTypes && ~mimeTypes.indexOf(file.type)) {
    if (!max || file.size <= max) {
      data = {
        url: URL.createObjectURL(file),
        name: file.name,
        type: type
      };
    }
  }

  return data;
};

export { isFunction, getWithMandatoryOptions, getFallbackUrlData, getFileObjectUrlByType };